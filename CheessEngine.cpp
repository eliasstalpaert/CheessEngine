//
// Created by eliass on 13/12/22.
//

#include "CheessEngine.hpp"
#include <tuple>
#include <memory>

std::string CheessEngine::name() const {
    return "Cheess Engine";
}

std::string CheessEngine::version() const {
    return "1";
}

std::string CheessEngine::author() const {
    return "Elias Stalpaert";
}

void CheessEngine::newGame() {
  //Reset state of the engine
}

/*****************
 *
 * MOVE SEARCHING
 *
 * ******************/

PrincipalVariation CheessEngine::pv(const Board &board, const TimeInfo::Optional &timeInfo) {
    //Compute PV of given board
    board.turn();
    timeInfo.value();
    PrincipalVariation pv;
    //Compute with negamax at fixed depth of 5 using evaluation function for each move until mate
    return pv;
}

std::tuple<Move, int>
CheessEngine::negamaxSearch(const Board::MoveVec& opponent_prev, const Board &board, unsigned int depth, int alpha, int beta, int turn) const {
    if(depth == 0) {}// || board.isMate()

        //if opponent move captures king reject previous move
        opponent_prev.size();
    board.turn();
    alpha = beta + turn;
    beta = alpha + turn;
        //Generate moves (std::uniqueptr)
        //std::unique_ptr<Board::MoveVec> childNodes = generateLegalMoves();
        return std::tuple<Move,int>(Move(Square::A1, Square::A1), 5);
}

/**************
 *
 * MOVE ORDERING
 *
 * **************/

/*************
 *
 * LEGAL MOVE GENERATION
 *
 * ****************/

//Results in mate or takes king not allowed

std::unique_ptr<Board::MoveVec> generateLegalMoves(const Board::MoveVec& opponent_prev, const Board &board) {
    Board::MoveVec moves;
    board.pseudoLegalMoves(moves);
    opponent_prev.size();
    //Check pinned pieces and eliminate them from the moves (pinned status should be removed after resolving checkmate)
    //When checkmate, detect attacking (xray attacks) of attacking piece (for potential blockers)
    //Then check attacked squares by other pieces to make sure king doesn't move into attacking territory
    return nullptr;
}
//If current player moves king, check for checkmate/stalemate in moves generated by opponent (defines the attacked square)

//If no valid moves (every move leaves king in check, meaning no legal moves anymore)
//and the opponent can take the king (current player was already checked), opponent wins otherwise stalemate

/****************
 *
 * BOARD EVALUATION
 *
 * ******************/

//Static scores
//Fifty move draw using current value of halfmove counter
//Threefold repetition check
//TODO: Forcing a draw with special rules

/**************
 *
 * TRANSPOSITION TABLES
 *
 * *****************/

std::optional<HashInfo> CheessEngine::hashInfo() const {
    //Only relevant if transposition tables are used
    return Engine::hashInfo();
}

void CheessEngine::setHashSize(std::size_t size) {
    //Only relevant if transposition tables are used
    Engine::setHashSize(size);
}
